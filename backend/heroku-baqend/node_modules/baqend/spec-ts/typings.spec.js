"use strict";
/// <reference path="./types.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const index_2 = require("../index");
index_2.db.connect('test', true).then(() => {
    //db.Test.load('test').then((entity) => {
    //
    //});
});
index_2.db.User.load('id').then((user) => {
    user.newPassword("alodPassword", "newPassword");
    user.customUserProp = "test";
});
index_2.db.User.find()
    .equal('age', 3)
    .between('age', 2, 20)
    .equal('name', 'Test QueryPerson')
    .in('vals', 3)
    .containsAny('vals', [3, 4, 5])
    .singleResult((user) => {
    user.username;
});
index_2.db.code.loadCode('foo', 'module', true)
    .then((code) => {
    code.name;
    code.call('test', 'world');
});
index_2.db.code.loadCode('foo', 'module', false)
    .then((code) => {
    code.includes('stuff');
});
index_2.db.code.loadCode('foo', 'module')
    .then((code) => {
    code.includes('stuff');
});
let builder = index_2.db.Role.find();
let q1 = builder.notIn('age', [3, 4, 5])
    .in('places', 2, 3, 4)
    .gt('ref', index_2.db.User.me);
let q2 = builder.equal('name', 'test')
    .notEqual('street', 'Mainroad');
builder.or(q1, q2)
    .singleResult((role) => {
    role.addUser(index_2.db.User.me);
});
index_2.db.Test.load('test').then((entity) => {
    entity.myProp = 'test';
    const headers = entity.file.headers;
    headers.test = 'new header';
});
index_2.db['Hallo'].find().singleResult().then(() => {
});
index_2.db.User.login("test", "pw").then((user) => {
});
const user = new index_2.db.User();
index_2.db.log.trace('A message');
index_2.db.log.debug('A message');
index_2.db.log.info('A message');
index_2.db.log.warn('A message');
index_2.db.log.error('A message');
index_2.db.log.info('A message with data', { some: "data" });
index_2.db.log.info('A message with placeholders %d %s', 1, 'string', { some: "data" });
const file = new index_2.db.File('test');
file.upload({ force: true });
file.loadMetadata().then(file => { });
file.loadMetadata({ refresh: true }).then(file => { });
index_2.db.modules.get('test', 'test=bla');
index_2.db.modules.get('test', { "test": "bla" }, { responseType: 'json' });
index_2.db.modules.post('test', { "test": "bla" }, { responseType: 'json' });
new index_1.metamodel.EmbeddableType("Type");
